"use strict";const serverinfo=new Serverinfo(("https:"===location.protocol?"wss://":"ws://")+location.host+"/ws");function Serverinfo(wsurl){const _this=this,cpuChartCanvas=document.getElementById("cpuChart_canvas"),ramChartCanvas=document.getElementById("ramChart_canvas"),chartOptions={maintainAspectRatio:!1,legend:{labels:!1},scales:{yAxes:[{ticks:{stepSize:25,fontColor:"#FFF",beginAtZero:!0,suggestedMin:0,suggestedMax:100},gridLines:{color:"#FFFFFF55"}}],xAxes:[{ticks:{stepSize:25,fontColor:"#FFF",source:"auto"},gridLines:{zeroLineColor:"#FFFFFF33",color:"#FFFFFF33"},type:"time",time:{unit:"minute",stepSize:1,displayFormats:{minute:"HH:mm"}}}]}};let cpuChart,ramChart;function initCpuChart(data){cpuChart=new Chart(cpuChartCanvas,{type:"line",data:{datasets:[{data:data,backgroundColor:"#bad13933",borderColor:"#bad139",borderWidth:2,lineTension:0,pointRadius:0}]},options:chartOptions})}function updateCpuChart(val){if(cpuChart){for(cpuChart.data.datasets[0].data.push({y:val,t:new Date});cpuChart.data.datasets[0].data.length>360;)cpuChart.data.datasets[0].data.shift();cpuChart.update()}}function initRamChart(data){ramChart=new Chart(ramChartCanvas,{type:"line",data:{datasets:[{data:data.map(val=>val.percentUsed),backgroundColor:"#bad13933",borderColor:"#bad139",borderWidth:2,lineTension:0,pointRadius:0},{data:data.map(val=>val.percentNotFree),backgroundColor:"#d1763933",borderColor:"#d17639",borderWidth:2,lineTension:0,pointRadius:0}]},options:chartOptions})}function updateRamChart(val,dataset){if(ramChart){for(ramChart.data.datasets[dataset].data.push({y:val,t:new Date});ramChart.data.datasets[dataset].data.length>180;)ramChart.data.datasets[dataset].data.shift();ramChart.update()}}function renderSysloadData(json,id){if(!json||void 0===id)return;const elem=document.querySelector(`#cpu_${id} .content`);elem.innerHTML=`1 Min.: ${json.sysload[0].toFixed(2)} - 5 Min.: ${json.sysload[1].toFixed(2)} - 15 Min.: ${json.sysload[2].toFixed(2)}<br>\n            Nutzer: ${json.percentage.user}% - Hintergrund: ${json.percentage.nice}% - System: ${json.percentage.sys}% - Leerlauf: ${json.percentage.idle}%`;const load=100-json.percentage.idle;updateCpuChart(load)}function renderRamData(json,id){if(!json||void 0===id)return;const elem=document.querySelector(`#ram_${id} .content`);elem.innerHTML=`Gesammt: ${utils.getByte(json.total)} - Belegt: ${utils.getByte(json.used)} - Frei: ${utils.getByte(json.free)}`,updateRamChart(json.percentUsed,0),updateRamChart(json.percentNotFree,1)}function renderHddData(json,id){if(!json||void 0===id)return;const elem=document.querySelector(`#hdd_${id} .content`);elem.innerHTML=`Gesammt: ${utils.getByte(json.total)} - Belegt: ${utils.getByte(json.used)} - Frei: ${utils.getByte(json.free)}`;const hddLadebalkenElem=document.querySelector(`#hdd_${id} .ladebalken`);setCrircleChart(hddLadebalkenElem,json.percent)}function renderContainerData(json,id){if(!json||void 0===id)return;const elem=document.querySelector(`#container_${id} .content`);elem.clearChildren(),json.containers.forEach(ctrData=>{const cpuStatusClass=ctrData.cpu>100?"overload":ctrData.cpu>67?"critical":ctrData.cpu>50?"high":ctrData.cpu>33?"increased":"",ramStatusClass=ctrData.ram>90?"critical":ctrData.ram>80?"high":ctrData.ram>67?"increased":"",container=document.createElement("div");container.className="container_entry "+ctrData.status.split(" ")[0],container.innerHTML=`<p class="container_name">${ctrData.name}</p>\n                        <p class="container_image">${ctrData.image}</p>\n                        <p class="container_status">${ctrData.status}</p>\n                        <div class="container_loadBar_outer" title="CPU: ${ctrData.cpu}">\n                            <div class="container_loadBar_inner cpu ${cpuStatusClass}"\n                                style="width:${ctrData.cpu>100?100:ctrData.cpu}%" title="CPU: ${ctrData.cpu}%"></div>\n                            <div class="container_loadBar_avg" style="left:${ctrData.cpuAvg>100?100:ctrData.cpuAvg}%"></div>\n                            <div class="container_loadBar_max" style="left:${ctrData.cpuMax>100?100:ctrData.cpuMax}%"></div>\n                        </div>\n                        <div class="container_loadBar_outer" title="RAM: ${ctrData.ram}">\n                            <div class="container_loadBar_inner ram ${ramStatusClass}"\n                                style="width:${ctrData.ram>100?100:ctrData.ram}%" title="RAM: ${ctrData.ram}%"></div>\n                            <div class="container_loadBar_avg" style="left:${ctrData.ramAvg>100?100:ctrData.ramAvg}%"></div>\n                            <div class="container_loadBar_max" style="left:${ctrData.ramMax>100?100:ctrData.ramMax}%"></div>\n                        </div>`,elem.appendChild(container)})}function renderNetworkData(json,id){if(!json||void 0===id)return;const elem=document.querySelector(`#network_${id} .content`);elem.innerHTML=`<table>\n            <tr><th></th><th>Gesammt</th><th>Gestern</th><th>Heute</th><th>Ltz. Stunde</th></tr>\n            <tr><td><b>Eingehend</b></td><td>${utils.getByte(json.in.total)}</td><td>${utils.getByte(json.in.yesterday)}</td><td>${utils.getByte(json.in.today)}</td><td>${utils.getByte(json.in.lasthour)}</td></tr>\n            <tr><td><b>Ausgehend</b></td><td>${utils.getByte(json.out.total)}</td><td>${utils.getByte(json.out.yesterday)}</td><td>${utils.getByte(json.out.today)}</td><td>${utils.getByte(json.out.lasthour)}</td></tr>\n            </table><br/>Durchschn. Auslastung: ${utils.getByte(json.avgload)}/Sek. (${json.percent}% bei 100 Mbit/s)`}function renderSoftwareData(json,id){if(!json||void 0===id)return;const elem=document.querySelector(`#software_${id} .content`);elem.innerHTML=json.map(val=>`<div class="software_entry"><b>${val.name}</b>: ${val.val}</div>`).join("")}function renderUptimeData(json,id){if(!json||void 0===id)return;const elem=document.querySelector(`#uptime_${id} .content`);elem.innerHTML=utils.getTime(json.uptime)}function setCrircleChart(elem,percent){const options={percent:parseFloat(percent)||1e-4,size:160,lineWidth:12,rotate:0},canvas=elem.getElementsByTagName("canvas")[0]||document.createElement("canvas"),span=elem.getElementsByTagName("span")[0]||document.createElement("span");span.textContent=options.percent.toFixed(2).replace(".",",")+"%","undefined"!=typeof G_vmlCanvasManager&&G_vmlCanvasManager.initElement(canvas);const ctx=canvas.getContext("2d");canvas.width=canvas.height=options.size,elem.appendChild(span),elem.appendChild(canvas),ctx.translate(options.size/2,options.size/2),ctx.rotate((options.rotate/180-.5)*Math.PI);const radius=(options.size-options.lineWidth)/2,drawCircle=function(color,lineWidth,percent){percent=Math.min(Math.max(0,percent||1),1),ctx.beginPath(),ctx.arc(0,0,radius,0,2*Math.PI*percent,!1),ctx.strokeStyle=color,ctx.lineCap="round",ctx.lineWidth=lineWidth,ctx.stroke()};let color="green";percent>90?color="purple":percent>80?color="red":percent>67&&(color="orange"),drawCircle("#efefef66",options.lineWidth,1),drawCircle(color,options.lineWidth+1,options.percent/100)}this.connection,this.verbinden=function(){_this.connection=new WebSocket(wsurl),_this.connection.onopen=function(){document.body.style.cursor="wait",_this.connection.send(JSON.stringify({purpose:"init"})),document.body.style.cursor="default"},_this.connection.onmessage=function(msg){let json=JSON.parse(msg.data);if(json.purpose)switch(json.purpose){case"initialData":json.data.forEach(val=>{switch(val.type){case"cpu":renderSysloadData(val.data,val.id),initCpuChart(val.archive);break;case"ram":renderRamData(val.data,val.id),initRamChart(val.archive);break;case"hdd":renderHddData(val.data,val.id);break;case"container":renderContainerData(val.data,val.id);break;case"network":renderNetworkData(val.data,val.id);break;case"software":renderSoftwareData(val.data,val.id);break;case"uptime":renderUptimeData(val.data,val.id)}});break;case"updateCpuData":renderSysloadData(json.data,json.id);break;case"updateRamData":renderRamData(json.data,json.id);break;case"updateHddData":renderHddData(json.data,json.id);break;case"updateContainerData":renderContainerData(json.data,json.id);break;case"updateNetLoadData":renderNetworkData(json.data,json.id);break;case"updateSoftVerData":renderSoftwareData(json.data,json.id);break;case"updateUptimeData":renderUptimeData(json.data,json.id)}},_this.connection.onerror=function(error){console.error(error)},_this.connection.onclose=function(ev){console.log(ev)}}}serverinfo.verbinden();const utils={getByte(bytes){(!bytes||bytes<0)&&(bytes=0);let symbol=" Bytes";return(bytes=parseFloat(bytes))>1024&&(symbol=" KB",bytes/=1024),bytes>1024&&(symbol=" MB",bytes/=1024),bytes>1024&&(symbol=" GB",bytes/=1024),bytes>1024&&(symbol=" TB",bytes/=1024),bytes>1024&&(symbol=" PB",bytes/=1024),bytes>1024&&(symbol=" EB",bytes/=1024),(bytes=bytes.toFixed(2))+symbol},getTime(total){if(total<60)return"Weniger als eine Minute";const seconds=total%60,minutes=(total-seconds)/60%60,hours=((total-seconds)/60-minutes)/60%24,days=Math.floor(((total-seconds)/60-minutes)/60/24)%365,years=Math.floor(((total-seconds)/60-minutes)/60/24/365),timeStrArr=[];1==years?timeStrArr.push(years+" Jahr"):years>1&&timeStrArr.push(years+" Jahre"),1==days?timeStrArr.push(days+" Tag"):days>1&&timeStrArr.push(days+" Tage"),1==hours?timeStrArr.push(hours+" Stunde"):hours>1&&timeStrArr.push(hours+" Stunden"),1==minutes?timeStrArr.push(minutes+" Minute"):minutes>1&&timeStrArr.push(minutes+" Minuten");const lastElemIndex=timeStrArr.length-1;return lastElemIndex>0&&(timeStrArr[lastElemIndex]="und "+timeStrArr[lastElemIndex]),timeStrArr.join(" ")}};void 0===Element.prototype.clearChildren&&Object.defineProperty(Element.prototype,"clearChildren",{configurable:!0,enumerable:!1,value:function(){for(;this.firstChild;)this.removeChild(this.lastChild)}});
//# sourceMappingURL=main.min.js.map